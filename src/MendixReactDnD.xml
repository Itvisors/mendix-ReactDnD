<?xml version="1.0" encoding="utf-8" ?>
<widget id="itvisors.mendixreactdnd.MendixReactDnD" pluginWidget="true" needsEntityContext="true" offlineCapable="true"
        supportedPlatform="Web"
        xmlns="http://www.mendix.com/widget/1.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.mendix.com/widget/1.0/ ../node_modules/mendix/custom_widget.xsd">
    <name>Drag-drop container</name>
    <description>Wrapper for react-dnd</description>
    <properties>

        <propertyGroup caption="Containers">
            <property key="containerList" type="object" isList="true">
                <caption>Datasource containers</caption>
                <description></description>
                <properties>
                    <propertyGroup caption="Container">
                        <property key="containerID" type="expression">
                            <caption>Container ID</caption>
                            <description>Set a key value of the enumeration used for the Clicked container ID</description>
                            <returnType type="String" />
                        </property>
                        <property key="rowNumber" type="expression">
                            <caption>Row number</caption>
                            <description>Row number, starts at 1</description>
                            <returnType type="Integer" />
                        </property>
                        <property key="columnNumber" type="expression">
                            <caption>Column number</caption>
                            <description>Column number, starts at 1, widget does not create components for gaps in the column numbers</description>
                            <returnType type="Integer" />
                        </property>
                        <property key="dragDropType" type="enumeration" defaultValue="none">
                            <caption>DnD type</caption>
                            <description>Drag/drop type.</description>
                            <enumerationValues>
                                <enumerationValue key="none">None</enumerationValue>
                                <enumerationValue key="drag">Drag</enumerationValue>
                                <enumerationValue key="drop">Drop</enumerationValue>
                                <enumerationValue key="both">Both</enumerationValue>
                            </enumerationValues>
                        </property>
                        <property key="allowSelection" type="enumeration" defaultValue="none">
                            <caption>Allow selection</caption>
                            <description>Whether markers may be selected. The widget keeps track of selected markers.</description>
                            <enumerationValues>
                                <enumerationValue key="none">None</enumerationValue>
                                <enumerationValue key="single">Single</enumerationValue>
                                <enumerationValue key="multiple">Multiple</enumerationValue>
                            </enumerationValues>
                        </property>
                        <property key="returnOnClick" type="expression">
                            <caption>Return OnClick</caption>
                            <description>Whether OnClick events should be returned for the container. Useful for getting the exact click coordinate on the container.</description>
                            <returnType type="Boolean" />
                        </property>
                        <property key="allowDragToSelect" type="boolean" defaultValue="false">
                            <caption>Allow drag to select</caption>
                            <description>Allow dragging across the background/floorplan to select items by drawing a selection area. Only makes sense when multi-select is allowed on items in the same row/column combination.</description>
                        </property>
                        <property key="acceptsContainerIDs" type="expression" required="false">
                            <caption>Accepts IDs</caption>
                            <description>One or more key values of the enumeration used for the Container ID. Separate values using a comma.</description>
                            <returnType type="String" />
                        </property>
                    </propertyGroup>
                    <propertyGroup caption="Datasource">
                        <property key="ds" type="datasource" isList="true" required="false">
                            <caption>Data source</caption>
                            <description></description>
                        </property>
                        <property key="dsContent" type="widgets" dataSource="ds" required="false">
                            <caption>Content for datasource</caption>
                            <description></description>
                        </property>
                        <property key="dsDragHandleContent" type="widgets" dataSource="ds" required="false">
                            <caption>Drag handle content</caption>
                            <description>Drag handle content for datasource. If used, only that part of the datasource item will be draggable. Only if content is set, ignored otherwise.</description>
                        </property>
                        <property key="dsDisableDrag" type="expression" dataSource="ds" required="false">
                            <caption>Disable drag</caption>
                            <description>Optional. When dragging is possible, use this to (temporarily) disable dragging of this item.</description>
                            <returnType type="Boolean" />
                        </property>
                        <property key="dsNameAttribute" type="attribute" dataSource="ds" required="false">
                            <caption>Name</caption>
                            <description>Name attribute. When set, will render a data-name attribute with the value on the item element.</description>
                            <attributeTypes>
                                <attributeType name="String" />
                            </attributeTypes>
                        </property>
                        <property key="dsMarkerClassAttribute" type="attribute" dataSource="ds" required="false">
                            <caption>Marker class</caption>
                            <description>Optional, value will be added to the CSS class of the marker.</description>
                            <attributeTypes>
                                <attributeType name="String" />
                            </attributeTypes>
                        </property>
                        <property key="dsChildIDs" type="attribute" dataSource="ds" required="false">
                            <caption>Child IDs</caption>
                            <description>Optional. Comma separated list of item IDs that are related to the datasource item. Item ID is the GUID of the Mendix object. See documentation for more details</description>
                            <attributeTypes>
                                <attributeType name="String" />
                            </attributeTypes>
                        </property>
                    </propertyGroup>
                    <propertyGroup caption="Image item">
                        <property key="dsOffsetX" type="attribute" dataSource="ds" required="false">
                            <caption>Offset X</caption>
                            <description>Offset X position for the item. When X and Y offset are set, position absolute is also set on the item.</description>
                            <attributeTypes>
                                <attributeType name="Integer" />
                            </attributeTypes>
                        </property>
                        <property key="dsOffsetY" type="attribute" dataSource="ds" required="false">
                            <caption>Offset Y</caption>
                            <description>Offset Y position for the item.</description>
                            <attributeTypes>
                                <attributeType name="Integer" />
                            </attributeTypes>
                        </property>
                        <property key="dsImageUrl" type="attribute" dataSource="ds" required="false">
                            <caption>Image URL</caption>
                            <description>Image URL. Can be absolute, concatenated with Mendix remote URL when it does not start with http, should not start with / in that case.</description>
                            <attributeTypes>
                                <attributeType name="String" />
                            </attributeTypes>
                        </property>
                        <property key="dsImageHeight" type="attribute" dataSource="ds" required="false">
                            <caption>Image height</caption>
                            <description></description>
                            <attributeTypes>
                                <attributeType name="Integer" />
                            </attributeTypes>
                        </property>
                        <property key="dsImageWidth" type="attribute" dataSource="ds" required="false">
                            <caption>Image width</caption>
                            <description></description>
                            <attributeTypes>
                                <attributeType name="Integer" />
                            </attributeTypes>
                        </property>
                        <property key="dsScaleImage" type="expression" dataSource="ds" required="false">
                            <caption>Scale image</caption>
                            <description>Scale image with zoom percentage</description>
                            <returnType type="Boolean" />
                        </property>
                        <property key="dsImageRotation" type="attribute" dataSource="ds" required="false">
                            <caption>Rotation</caption>
                            <description></description>
                            <attributeTypes>
                                <attributeType name="Integer" />
                            </attributeTypes>
                        </property>
                        <property key="dsAllowRotate" type="expression" dataSource="ds" required="false">
                            <caption>Allow rotate</caption>
                            <description>Whether user may rotate the image. Only when image is rendered. If true, a rotation handle will be shown when the user hovers over the image.</description>
                            <returnType type="Boolean" />
                        </property>
                        <property key="dsShowGrid" type="expression" dataSource="ds" required="false">
                            <caption>Show grid</caption>
                            <description></description>
                            <returnType type="Boolean" />
                        </property>
                        <property key="dsGridSize" type="expression" dataSource="ds" required="false">
                            <caption>Grid size</caption>
                            <description>Grid size. Any value less than 5 is ignored, 5 will be used</description>
                            <returnType type="Integer" />
                        </property>
                        <property key="dsIsTemplateItem" type="expression" dataSource="ds" required="false">
                            <caption>Is template item</caption>
                            <description></description>
                            <returnType type="Boolean" />
                        </property>
                        <property key="dsMaxTemplateWidth" type="expression" dataSource="ds" required="false">
                            <caption>Max. template width</caption>
                            <description>Maximum template width to ensure that images do not exceed the sidebar width</description>
                            <returnType type="Integer" />
                        </property>
                    </propertyGroup>
                    <propertyGroup caption="Styling">
                        <property key="containerClass" type="expression" required="false">
                            <caption>Container class</caption>
                            <description>Class to place on the container</description>
                            <returnType type="String" />
                        </property>
                        <property key="draggableClass" type="string" required="true" defaultValue="draggable-container">
                            <caption>Draggable class</caption>
                            <description>Class to place on the draggable container</description>
                        </property>
                        <property key="draggingClass" type="string" required="true" defaultValue="dragging-container">
                            <caption>Dragging class</caption>
                            <description>Class to place on the draggable container while dragging is active. Note that this applies to the original item, not the dragged copy</description>
                        </property>
                        <property key="dropTargetClass" type="string" required="true" defaultValue="droptarget-container">
                            <caption>Drop target class</caption>
                            <description>Class to place on the drop target container</description>
                        </property>
                        <property key="canDropClass" type="string" required="true" defaultValue="droptarget-candrop">
                            <caption>Can drop class</caption>
                            <description>Class to place on the drop target container when a valid item is hovered over it</description>
                        </property>
                        <property key="invalidDropClass" type="string" required="true" defaultValue="droptarget-invalid">
                            <caption>Invalid drop class</caption>
                            <description>Class to place on the drop target container when an invalid item is hovered over it</description>
                        </property>
                    </propertyGroup>
                </properties>
            </property>
        </propertyGroup>

        <propertyGroup caption="Configuration">
            <property key="useTouchBackend" type="expression" required="false">
                <caption>Use touch backend</caption>
                <description>When true, the touch backend will be used for drag/drop operations.</description>
                <returnType type="Boolean" />
            </property>
            <property key="dataChangeDateAttr" type="attribute">
                <caption>Data change date</caption>
                <description>Update the date in your logic to make the widget update the table. (Pluggable widgets are rendered VERY often!)</description>
                <attributeTypes>
                    <attributeType name="DateTime"/>
                </attributeTypes>
            </property>
            <property key="zoomPercentage" type="expression" required="false">
                <caption>Zoom %</caption>
                <description>Optional. Zoom percentage, when set, will be used to correct X/Y offset for the zoom percentage</description>
                <returnType type="Integer" />
            </property>
            <property key="adjustOffset" type="expression" required="false">
                <caption>Adjust offset</caption>
                <description>Optional. Adjust offset for zoom position.</description>
                <returnType type="Boolean" />
            </property>
            <property key="snapToGrid" type="expression" required="false">
                <caption>Snap to grid</caption>
                <description>When true, drop only along grid lines.</description>
                <returnType type="Boolean" />
            </property>
            <property key="snapToSize" type="expression" defaultValue="1">
                <caption>Snap to size</caption>
                <description>Snap to size. Any value less than 5 is ignored</description>
                <returnType type="Integer" />
            </property>
            <property key="snapToRotate" type="expression" required="false">
                <caption>Snap to rotate</caption>
                <description>When true, rotate along rotation drag degrees.</description>
                <returnType type="Boolean" />
            </property>
            <property key="rotationDragDegrees" type="expression" defaultValue="5">
                <caption>Rotation drag degrees</caption>
                <description>Number of degrees to rotate while dragging the rotation handle</description>
                <returnType type="Integer" />
            </property>
            <property key="rotationButtonDegrees" type="expression" defaultValue="90">
                <caption>Rotation button degrees</caption>
                <description>Number of degrees to rotate when clicking a rotation button</description>
                <returnType type="Integer" />
            </property>
            <property key="addToCurrentRotation" type="expression" required="false">
                <caption>Add to rotation</caption>
                <description>When true, add the rotation button degrees value to the current rotation. When false, rotate to the next or previous value.</description>
                <returnType type="Boolean" />
            </property>
            <property key="selectedMarkerGuids" type="attribute" required="false">
                <caption>Selected marker GUIDs</caption>
                <description>The selected marker(s). Comma separated list of GUIDs.</description>
                <attributeTypes>
                    <attributeType name="String" />
                </attributeTypes>
            </property>
            <property key="selectedMarkerCount" type="attribute" required="false">
                <caption>Selected marker count</caption>
                <description>Optional. Number of selected markers. Only relevant when multiselect of markers is allowed at one or more containers.</description>
                <attributeTypes>
                    <attributeType name="Integer" />
                </attributeTypes>
            </property>
            <property key="scrollToContainerRow" type="attribute" required="false">
                <caption>Scroll to container row</caption>
                <description>Optional. To be used when scrolling a specific cell. The cell is defined by the row/column combination.</description>
                <attributeTypes>
                    <attributeType name="Integer" />
                </attributeTypes>
            </property>
            <property key="scrollToContainerColumn" type="attribute" required="false">
                <caption>Scroll to container column</caption>
                <description></description>
                <attributeTypes>
                    <attributeType name="Integer" />
                </attributeTypes>
            </property>
            <property key="scrollToX" type="attribute" required="false">
                <caption>Scroll to X position</caption>
                <description></description>
                <attributeTypes>
                    <attributeType name="Integer" />
                </attributeTypes>
            </property>
            <property key="scrollToY" type="attribute" required="false">
                <caption>Scroll to Y posiion</caption>
                <description></description>
                <attributeTypes>
                    <attributeType name="Integer" />
                </attributeTypes>
            </property>
            <property key="scrollToDelay" type="integer" defaultValue="0">
                <caption>Scroll to delay (ms)</caption>
                <description>The number of milliseconds to wait before actually scrolling. Must be zero or positive.</description>
            </property>
        </propertyGroup>

        <propertyGroup caption="Events">
            <property key="onClickAction" type="action" required="false">
                <caption>On click action</caption>
                <description></description>
                <actionVariables>
                    <actionVariable key="containerID" type="String" caption="container ID of the clicked item" />
                    <actionVariable key="clientX" type="Integer" caption="client (mouse) X position for the event" />
                    <actionVariable key="clientY" type="Integer" caption="client (mouse) Y position for the event" />
                    <actionVariable key="offsetX" type="Integer" caption="offset X position for the event, relative from the element" />
                    <actionVariable key="offsetY" type="Integer" caption="offset Y position for the event, relative from the element" />
                    <actionVariable key="eventGuid" type="String" caption="guid of the clicked item" />
                    <actionVariable key="selectedMarkerGuids" type="String" caption="the selected marker(s), comma separated list of GUIDs." />
                    <actionVariable key="selectedMarkerCount" type="Integer" caption="number of selected markers, only relevant when multiselect of markers is allowed at one or more containers" />
                    <actionVariable key="shiftKeyHeld" type="Boolean" caption="whether the shift key was held" />
                    <actionVariable key="ctrlKeyHeld" type="Boolean" caption="whether the ctrl key was held" />
                    <actionVariable key="altKeyHeld" type="Boolean" caption="whether the alt key was held" />
                    <actionVariable key="isRightClickEvent" type="Boolean" caption="whether the click event is a right click" />
                </actionVariables>
            </property>
            <property key="onDropAction" type="action">
                <caption>On drop action</caption>
                <description></description>
                <actionVariables>
                    <actionVariable key="containerID" type="String" caption="container ID of the clicked item" />
                    <actionVariable key="clientX" type="Integer" caption="client (mouse) X position for the event" />
                    <actionVariable key="clientY" type="Integer" caption="client (mouse) Y position for the event" />
                    <actionVariable key="offsetX" type="Integer" caption="offset X position for the event, relative from the element" />
                    <actionVariable key="offsetY" type="Integer" caption="offset Y position for the event, relative from the element" />
                    <actionVariable key="eventGuid" type="String" caption="guid of the clicked item" />
                    <actionVariable key="selectedMarkerGuids" type="String" caption="the selected marker(s), comma separated list of GUIDs." />
                    <actionVariable key="selectedMarkerCount" type="Integer" caption="number of selected markers, only relevant when multiselect of markers is allowed at one or more containers" />
                    <actionVariable key="draggedDifferenceX" type="Integer" caption="dragged difference for the X offset" />
                    <actionVariable key="draggedDifferenceY" type="Integer" caption="dragged difference for the Y offset" />
                    <actionVariable key="dropTargetContainerID" type="String" caption="container ID of the drop target" />
                    <actionVariable key="dropTargetGuid" type="String" caption="guid of the drop target" />
                </actionVariables>
            </property>
            <property key="onRotateAction" type="action" required="false">
                <caption>On rotate action</caption>
                <description>Optional. On rotate action. Required when allowing users to rotate items.</description>
                <actionVariables>
                    <actionVariable key="containerID" type="String" caption="container ID of the clicked item" />
                    <actionVariable key="eventGuid" type="String" caption="guid of the clicked item" />
                    <actionVariable key="newRotation" type="Integer" caption="new rotation for the object" />
                </actionVariables>
            </property>
            <property key="onDragToSelect" type="action" required="false">
                <caption>On drag to select</caption>
                <description>Optional. Called when user selects multiple markers by dragging a selection area. Required only when allowing users to do so.</description>
                <actionVariables>
                    <actionVariable key="selectedMarkerGuids" type="String" caption="the selected marker(s), comma separated list of GUIDs" />
                    <actionVariable key="selectedMarkerCount" type="Integer" caption="number of selected markers, only relevant when multiselect of markers is allowed at one or more containers" />
                </actionVariables>
            </property>
            <property key="onScrollToHandledAction" type="action" required="false">
                <caption>On scroll to handled action</caption>
                <description>Optional. When using scroll to, this action can be used to commit the context. In a microflow or just use save changes.</description>
            </property>
        </propertyGroup>

        <propertyGroup caption="Styling">
            <property key="additionalMarkerClassData" type="attribute" required="false">
                <caption>Marker class JSON</caption>
                <description>JSON string that contains an array of elements. See documentation for more details</description>
                <attributeTypes>
                    <attributeType name="String" />
                </attributeTypes>
            </property>
            <property key="selectedMarkerClass" type="string" defaultValue="selectedItem">
                <caption>Selected marker class</caption>
                <description>Class to place on the selected marker(s)</description>
            </property>
            <property key="selectedMarkerBorderSize" type="expression" defaultValue="2">
                <caption>Selected marker border width</caption>
                <description>Width of border on selected marker class. Adjust to match used CSS.</description>
                <returnType type="Integer" />
            </property>
        </propertyGroup>
    </properties>
</widget>
